<tool id="pathview" name="pathview" version="@VERSION@.0">
    <description>visualize pathways</description>
     <macros>
       <import>pathview_macros.xml</import>
    </macros>

    <requirements>
        <requirement type="package" version="@VERSION@">bioconductor-pathview</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script' &&
        if [ -f "$pathview_select.species$pathview_select.pathway_id_select.pathway_id".png ] ;
        then mv "$pathview_select.species$pathview_select.pathway_id_select.pathway_id".png "$png_output1" ; fi &&

        if [ -f "$pathview_select.species$pathview_select.pathway_id_select.pathway_id"."$pathview_select.out_suffix".png ] ;
        then mv "$pathview_select.species$pathview_select.pathway_id_select.pathway_id"."$pathview_select.out_suffix".png "$png_output2" 
        ; fi &&

        if [ -f "$pathview_select.species$pathview_select.pathway_id_select.pathway_id"."$pathview_select.out_suffix".pdf ] ;
        then mv "$pathview_select.species$pathview_select.pathway_id_select.pathway_id"."$pathview_select.out_suffix".pdf "$pdf_output" 
        ; fi &&

        if [ -f "$pathview_select.species$pathview_select.pathway_id_select.pathway_id".xml ] ;
        then mv "$pathview_select.species$pathview_select.pathway_id_select.pathway_id".xml "$xml_output" ; fi 
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(pathview)

object <- "$object"

#if str($short_name) != ""
    short_name <- TRUE
#else
    short_name <- FALSE
#end if

data <- node.info(object, short.name = short_name)

#if str($output) == "kegg.names"
    write.table(unlist(data[1]), "$kegg_names_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "type"
    write.table(unlist(data[2]), "$type_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "component"
    write.table(unlist(data[3]), "$component_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "size"
    write.table(unlist(data[4]), "$size_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "labels"
    write.table(unlist(data[5]), "$labels_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "shape"
    write.table(unlist(data[6]), "$shape_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "x"
    write.table(unlist(data[7]), "$x_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "y"
    write.table(unlist(data[8]), "$y_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "width"
    write.table(unlist(data[9]), "$width_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "height"
    write.table(unlist(data[10]), "$height_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if

#if str($node_map_select.node_map_selector) == "yes"
    #if str($node_map_select.mol_data_select.mol_data_selector) == "yes"
        mol_data <- scan("$node_map_select.mol_data_select.mol_data", what=character())
    #else
        mol_data <- NULL
    #end if
    node_types <- "$node_map_select.node_types"
    node_sum <- "$node_map_select.node_sum"
    #if str($node_map_select.entrez_gnodes) != ""
        entrez_gnodes <- TRUE
    #else
        entrez_gnodes <- FALSE
    #end if

    result <- node.map(mol.data = mol_data, data, node.types = node_types, node.sum = node_sum, entrez.gnodes=entrez_gnodes)

    write.table(result, "$node_map_output", row.name=FALSE, col.name=TRUE, quote=FALSE)

    #if str($node_map_select.node_color_select.node_color_selector) == "yes"
        #if str($node_map_select.node_color_select.discrete) != ""
            discrete <- TRUE
        #else 
            discrete <- FALSE
        #end if

        #if str($node_map_select.node_color_select.data_select) == "gene"
            limit <- as.numeric("$node_map_select.node_color_select.data_select.gene_limit")
        #else
            limit <- as.numeric("$node_map_select.node_color_select.data_select.cpd_limit")
        #end if
        bins <- as.numeric("$node_map_select.node_color_select.bin")

        #if str($node_map_select.node_color_select.both_dirs) != ""
            both_dirs <- TRUE
        #else
            both_dirs <- FALSE
        #end if
        low <- "$node_map_select.node_color_select.low"
        mid <- "$node_map_select.node_color_select.mid"
        high <- "$node_map_select.node_color_select.high"
        na_col <- "$node_map_select.node_color_select.na_col"

        #if str($node_map_select.node_color_select.trans_fun) != "none"
            trans_fun <- "$node_map_select.node_color_select.trans_fun"
        #else
            trans_fun <- NULL
        #end if

        node_color <- node.color(plot.data = result, discrete=discrete, limit=limit, bins=bins, both.dirs = both_dirs, low = low, mid = mid, high = high, na.col = na_col, trans.fun = trans_fun)

        write.table(node_color, "$node_color_output", row.name=FALSE, col.name=FALSE, quote=FALSE)

        ############################# col.key doesn't work ###################################
        #if str($node_map_select.node_color_select.col_key_select.col_key_selector) == "yes"
            #if str($node_map_select.node_color_select.col_key_select.cols_select.cols_selector) == "yes"
                cols <- scan("$node_map_select.node_color_select.col_key_select.cols_select.cols", what=character())
            #else
                cols <- NULL
            #end if
            graph_width <- as.numeric("$node_map_select.node_color_select.col_key_select.graph_width")
            graph_height <- as.numeric("$node_map_select.node_color_select.col_key_select.graph_height")
            graph_size <- c(graph_width, graph_height)
            node_width <- as.numeric("$node_map_select.node_color_select.col_key_select.node_width")
            node_height <- as.numeric("$node_map_select.node_color_select.col_key_select.node_height")
            node_size <- c(node_width, node_height)
            #if str($node_map_select.node_color_select.col_key_select.size_by_graph) != ""
                size_by_graph <- TRUE
            #else
                size_by_graph <- FALSE
            #end if
            key_pos <- "$node_map_select.node_color_select.col_key_select.key_pos"
            off_set_x <- as.numeric("$node_map_select.node_color_select.col_key_select.off_set_x")
            off_set_y <- as.numeric("$node_map_select.node_color_select.col_key_select.off_set_y")
            off_sets <- c(x = off_set_x, y = off_set_y)
            align <- "$node_map_select.node_color_select.col_key_select.key_align"
            cex <- as.numeric("$node_map_select.node_color_select.col_key_select.cex")
            lwd <- as.numeric("$node_map_select.node_color_select.col_key_select.lwd")

            sink("$col_key_output")
                col.key(discrete= discrete, limit = limit, bins = bins, cols = cols, both.dirs = both_dirs, low = low, mid = mid, high = high, graph.size = graph_size, node.size = node_size, size.by.graph = size_by_graph, key.pos = key_pos, off.sets = off_sets, align = align, cex = cex, lwd = lwd)
            sink()
        #end if
    #end if
#end if

#if str($pathview_select.pathview_selector) == "yes"
        #if str($pathview_select.data_select.data_selector) == "gene"
            #if str($pathview_select.data_select.sim_data_select.sim_data_selector) == "yes"
                #if str($pathview_select.data_select.sim_data_select.id_type) != ""
                    id_type <- "$pathview_select.data_select.sim_data_select.id_type"
                #else
                    id_type <- NULL
                #end if
                species <- "$pathview_select.data_select.sim_data_select.species"
                #if str($pathview_select.data_select.sim_data_select.discrete) != ""
                    discrete <- TRUE
                #else
                    discrete <- FALSE
                #end if
                nmol <- as.numeric("$pathview_select.data_select.sim_data_select.nmol")
                nexp <- as.numeric("$pathview_select.data_select.sim_data_select.nexp")
                rand_seed <- as.numeric("$pathview_select.data_select.sim_data_select.rand_seed")

                gene_data <- sim.mol.data(mol.type = "gene", id.type = id_type, species=species, discrete = discrete, nmol = nmol, nexp = nexp, rand.seed=rand_seed)
            #else
                #if str($pathview_select.data_select.sim_data_select.data_type) == "single"
                    gene_read <- read.table("$pathview_select.data_select.sim_data_select.gene_data", header=FALSE)
                    gene_data <- setNames(gene_read[[2]], gene_read[[1]])
                #else 
                    gene_data <- read.table("$pathview_select.data_select.sim_data_select.gene_data", header=FALSE)
                    gene_data <- data.matrix(gene_data)
                #end if
            #end if
            cpd_data <- NULL
            limit <- as.numeric("$pathview_select.data_select.gene_limit")
            #if str($pathview_select.data_select.discrete) != ""
                discrete <- TRUE
            #else
                discrete <- FALSE
            #end if
            bins <- as.numeric("$pathview_select.data_select.bin")
            #if str($pathview_select.data_select.both_dirs) != ""
                both_dirs <- TRUE
            #else
                both_dirs <- FALSE
            #end if
            low <- "$pathview_select.data_select.low"
            mid <- "$pathview_select.data_select.mid"
            high <- "$pathview_select.data_select.high"
            na_col <- "$pathview_select.data_select.na_col"

            #if str($pathview_select.data_select.trans_fun) != "none"
                trans_fun <- "$pathview_select.data_select.trans_fun"
            #else
                trans_fun <- NULL
            #end if   
        #else if str($pathview_select.data_select.data_selector) == "cpd"
            #if str($pathview_select.data_select.sim_data_select.sim_data_selector) == "yes"
                #if str($pathview_select.data_select.sim_data_select.id_type) != ""
                    id_type <- "$pathview_select.data_select.sim_data_select.id_type"
                #else
                    id_type <- NULL
                #end if
                species <- "$pathview_select.data_select.sim_data_select.species"
                #if str($pathview_select.data_select.sim_data_select.discrete) != ""
                    discrete <- TRUE
                #else
                    discrete <- FALSE
                #end if
                nmol <- as.numeric("$pathview_select.data_select.sim_data_select.nmol")
                nexp <- as.numeric("$pathview_select.data_select.sim_data_select.nexp")
                rand_seed <- as.numeric("$pathview_select.data_select.sim_data_select.rand_seed")

                cpd_data <- sim.mol.data(mol.type = "cpd", id.type = id_type, species=species, discrete = discrete, nmol = nmol, nexp = nexp, rand.seed=rand_seed)
            #else
                #if str($pathview_select.data_select.sim_data_select.data_type) == "single"
                    cpd_read <- read.table("$pathview_select.data_select.sim_data_select.cpd_data", header=FALSE)
                    cpd_data <- setNames(cpd_read[[2]], cpd_read[[1]])
                #else 
                    cpd_data <- read.table("$pathview_select.data_select.sim_data_select.cpd_data", header=FALSE)
                    cpd_data <- data.matrx(cpd_data)
                #end if
            #end if
            gene_data <- NULL
            limit <- as.numeric("$pathview_select.data_select.cpd_limit")
            #if str($pathview_select.data_select.discrete) != ""
                discrete <- TRUE
            #else
                discrete <- FALSE
            #end if
            bins <- as.numeric("$pathview_select.data_select.bin")
            #if str($pathview_select.data_select.both_dirs) != ""
                both_dirs <- TRUE
            #else
                both_dirs <- FALSE
            #end if
            low <- "$pathview_select.data_select.low"
            mid <- "$pathview_select.data_select.mid"
            high <- "$pathview_select.data_select.high"
            na_col <- "$pathview_select.data_select.na_col"

            #if str($pathview_select.data_select.trans_fun) != "none"
                trans_fun <- "$pathview_select.data_select.trans_fun"
            #else
                trans_fun <- NULL
            #end if
        #else
            #if str($pathview_select.data_select.gene_data.sim_gene_data_select.sim_gene_data_selector) == "yes"
                #if str($pathview_select.data_select.gene_data.sim_gene_data_select.id_type) != ""
                    id_type <- "$pathview_select.data_select.gene_data.sim_gene_data_select.id_type"
                #else
                    id_type <- NULL
                #end if
                species <- "$pathview_select.data_select.gene_data.sim_gene_data_select.species"
                #if str($pathview_select.data_select.gene_data.sim_gene_data_select.discrete) != ""
                    discrete <- TRUE
                #else
                    discrete <- FALSE
                #end if
                nmol <- as.numeric("$pathview_select.data_select.gene_data.sim_gene_data_select.nmol")
                nexp <- as.numeric("$pathview_select.data_select.gene_data.sim_gene_data_select.nexp")
                rand_seed <- as.numeric("$pathview_select.data_select.gene_data.sim_gene_data_select.rand_seed")

                gene_data <- sim.mol.data(mol.type = "gene", id.type = id_type, species=species, discrete = discrete, nmol = nmol, nexp = nexp, rand.seed=rand_seed)
            #else
                #if str($pathview_select.data_select.gene_data.sim_gene_data_select.gene_data_type) == "single"
                    gene_read <- read.table("$pathview_select.data_select.gene_data.sim_gene_data_select.gene_data", header=FALSE)
                    gene_data <- setNames(gene_read[[2]], gene_read[[1]])
                #else 
                    gene_data <- read.table("$pathview_select.data_select.gene_data.sim_gene_data_select.gene_data", header=FALSE)
                    gene_data <- data.matrix(gene_data)
                #end if
            #end if
            gene_limit <- as.numeric("$pathview_select.data_select.gene_data.gene_limit")
            #if str($pathview_select.data_select.gene_data.gene_discrete) != ""
                gene_discrete <- TRUE
            #else
                gene_discrete <- FALSE
            #end if
            gene_bins <- as.numeric("$pathview_select.data_select.gene_data.gene_bin")
            #if str($pathview_select.data_select.gene_data.gene_both_dirs) != ""
                gene_both_dirs <- TRUE
            #else
                gene_both_dirs <- FALSE
            #end if
            gene_low <- "$pathview_select.data_select.gene_data.gene_low"
            gene_mid <- "$pathview_select.data_select.gene_data.gene_mid"
            gene_high <- "$pathview_select.data_select.gene_data.gene_high"
            na_col <- "$pathview_select.data_select.gene_data.gene_na_col"

            #if str($pathview_select.data_select.gene_data.gene_trans_fun) != "none"
                gene_trans_fun <- "$pathview_select.data_select.gene_data.gene_trans_fun"
            #else
                gene_trans_fun <- NULL
            #end if

            #if str($pathview_select.data_select.cpd_data.sim_cpd_data_select.sim_cpd_data_selector) == "yes"
                #if str($pathview_select.data_select.cpd_data.sim_cpd_data_select.id_type) != ""
                    id_type <- "$pathview_select.data_select.cpd_data.sim_cpd_data_select.id_type"
                #else
                    id_type <- NULL
                #end if
                species <- "$pathview_select.data_select.cpd_data.sim_cpd_data_select.species"
                #if str($pathview_select.data_select.cpd_data.sim_cpd_data_select.discrete) != ""
                    discrete <- TRUE
                #else
                    discrete <- FALSE
                #end if
                nmol <- as.numeric("$pathview_select.data_select.cpd_data.sim_cpd_data_select.nmol")
                nexp <- as.numeric("$pathview_select.data_select.cpd_data.sim_cpd_data_select.nexp")
                rand_seed <- as.numeric("$pathview_select.data_select.cpd_data.sim_cpd_data_select.rand_seed")

                cpd_data <- sim.mol.data(mol.type = "cpd", id.type = id_type, species=species, discrete = discrete, nmol = nmol, nexp = nexp, rand.seed=rand_seed)
            #else
                #if str($pathview_select.data_select.cpd_data.sim_cpd_data_select.cpd_data_type) == "single"
                    cpd_read <- read.table("$pathview_select.data_select.cpd_data.sim_cpd_data_select.cpd_data", header=FALSE)
                    cpd_data <- setNames(cpd_read[[2]], cpd_read[[1]])
                #else 
                    cpd_data <- read.table("$pathview_select.data_select.cpd_data.sim_cpd_data_select.cpd_data", header=FALSE)
                    cpd_data <- data.matrix(cpd_data)
                #end if
            #end if
            cpd_limit <- as.numeric("$pathview_select.data_select.cpd_data.cpd_limit")
            #if str($pathview_select.data_select.cpd_data.cpd_discrete) != ""
                cpd_discrete <- TRUE
            #else
                cpd_discrete <- FALSE
            #end if
            cpd_bins <- as.numeric("$pathview_select.data_select.cpd_data.cpd_bin")
            #if str($pathview_select.data_select.cpd_data.cpd_both_dirs) != ""
                cpd_both_dirs <- TRUE
            #else
                cpd_both_dirs <- FALSE
            #end if
            cpd_low <- "$pathview_select.data_select.cpd_data.cpd_low"
            cpd_mid <- "$pathview_select.data_select.cpd_data.cpd_mid"
            cpd_high <- "$pathview_select.data_select.cpd_data.cpd_high"
            na_col <- "$pathview_select.data_select.cpd_data.cpd_na_col"

            #if str($pathview_select.data_select.cpd_data.cpd_trans_fun) != "none"
                cpd_trans_fun <- "$pathview_select.data_select.cpd_data.cpd_trans_fun"
            #else
                cpd_trans_fun <- NULL
            #end if

            limit <- list(gene=gene_limit, cpd=cpd_limit)
            bins <- list(gene=gene_bins, cpd=cpd_bins)
            both_dirs <- list(gene=gene_both_dirs, cpd=cpd_both_dirs)
            low <- list(gene=gene_low, cpd=cpd_low)
            mid <- list(gene=gene_mid, cpd=cpd_mid)
            high <- list(gene=gene_high, cpd=cpd_high)
            trans_fun <- list(gene=gene_trans_fun, cpd=cpd_trans_fun)
        #end if

    #if str($pathview_select.pathway_id_select.pathway_id_selector) == "single"
        pathway_id <- "$pathview_select.pathway_id_select.pathway_id"
    #else
        pathway_id <- scan($pathview_select.pathway_id_select.pathway_id, what=character())
    #end if
    species <- "$pathview_select.species"
    cpd_idtype <- "$pathview_select.cpd_idtype"
    gene_idtype <- "$pathview_select.gene_idtype" 
    #if str($pathview_select.gene_annotpkg) != ""
        gene_annotpkg <- "$pathview_select.gene_annotpkg"
    #else
        gene_annotpkg <- NULL
    #end if
    min_nnodes <- as.numeric("$pathview_select.min_nnodes")
    #if str($pathview_select.map_null) != ""
        map_null <- TRUE
    #else
        map_null <- FALSE
    #end if
    node_sum <- "$pathview_select.node_sum"
    
    out_suffix <- "$pathview_select.out_suffix"
    key_align <- "$pathview_select.key_align"
    key_pos <- "$pathview_select.key_pos"

    #if str($pathview_select.kegg_native_select.kegg_native_selector) == "yes"
        kegg_native <- TRUE
        expand_node <- FALSE
        split_group <- FALSE
        same_layer <- TRUE
        map_symbol <- TRUE
        map_cpdname <- TRUE
        #if str($pathview_select.kegg_native_select.same_layer_select.same_layer_selector) == "yes"
            same_layer <- TRUE
            #if str($pathview_select.kegg_native_select.same_layer_select.map_symbol) != ""
                map_symbol <- TRUE
            #else
                map_symbol <- FALSE
            #end if
        #else
            same_layer <- FALSE
        #end if

        pathview(gene.data = gene_data, cpd.data = cpd_data, pathway.id = pathway_id, species = species, kegg.dir = ".", cpd.idtype = cpd_idtype, gene.idtype = gene_idtype, gene.annotpkg = gene_annotpkg, min.nnodes = min_nnodes, kegg.native = kegg_native, map.null = map_null, expand.node = expand_node, split.group = split_group, map.symbol = map_symbol, map.cpdname = map_cpdname, node.sum = node_sum, discrete=discrete, limit = limit, bins = bins, both.dirs = both_dirs, trans.fun = trans_fun, low = low, mid = mid, high = high, na.col = na_col, same.layer = same_layer, out.suffix = out_suffix, keys.align = key_align, key.pos = key_pos)

        #pathview(gene.data = gene_data, cpd.data = cpd_data, pathway.id = pathway_id, species = species, out.suffix = out_suffix, keys.align = key_align, kegg.native = kegg_native, key.pos = key_pos)
    #else
        kegg_native <- FALSE
        same_layer <- TRUE
        map_symbol <- TRUE
        #if str($pathview_select.kegg_native_select.expand_node) != ""
            expand_node <- TRUE
        #else 
            expand_node <- FALSE
        #end if
        #if str($pathview_select.kegg_native_select.split_group) != ""
            split_group <- TRUE
        #else 
            split_group <- FALSE
        #end if
        #if str($pathview_select.kegg_native_select.map_cpdname) != ""
            map_cpdname <- TRUE
        #else 
            map_cpdname <- FALSE
        #end if

        pathview(gene.data = gene_data, cpd.data = cpd_data, pathway.id = pathway_id, species = species, kegg.dir = ".", cpd.idtype = cpd_idtype, gene.idtype = gene_idtype, gene.annotpkg = gene_annotpkg, min.nnodes = min_nnodes, kegg.native = kegg_native, map.null = map_null, expand.node = expand_node, split.group = split_group, map.symbol = map_symbol, map.cpdname = map_cpdname, node.sum = node_sum, discrete=discrete, limit = limit, bins = bins, both.dirs = both_dirs, trans.fun = trans_fun, low = low, mid = mid, high = high, na.col = na_col, same.layer = same_layer, out.suffix = out_suffix)
    #end if
#end if
]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="object" type="data" format="xml" label="KGML file" />
        <param name="short_name" type="boolean" truevalue="true" falsevalue="" checked="true" label="Short labels" help="i.e. the first iterm separated by a comma in the long labels are parsed out as node labels" />
        <param name="output" type="select" label="Which extracted node information to output?" >
            <option value="kegg.names">kegg.names</option>
            <option value="type">type</option>
            <option value="component">component</option>
            <option value="size">size</option>
            <option value="labels">labels</option>
            <option value="shape">shape</option>
            <option value="x">x</option>
            <option value="y">y</option>
            <option value="width">width</option>
            <option value="height">height</option>
        </param>
        <conditional name="node_map_select">
            <param name="node_map_selector" type="select" label="Map molecular data onto KEGG pathway nodes?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" type="select" label="Specify mol data?">
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <param name="mol_data" type="data" format="tabular" label="mol data" help="Either a dataframe with one numeric column labeled with molecule IDs as names (single sample) or a matrix-like data (multiple sample)." />
                    </when>
                    <when value="no"> </when>
                </conditional>
                <param name="node_types" type="select" label="Specify the node type to map to the mol data" >
                    <option value="gene">Gene</option>
                    <option value="compound">Compound</option>
                    <option value="ortholog">Ortholog</option>
                </param>
                <param name="node_sum" type="select" label="Specify the method name to calculate node summary given that multiple genes or compounds are mapped to it" >
                    <option value="sum">sum</option>
                    <option value="mean">mean</option>
                    <option value="max">max</option>
                    <option value="max_abs">max.abs</option>
                    <option value="random">random</option>
                </param>
                <param name="entrez_gnodes" type="boolean" truevalue="true" falsevalue="" checked="true" label="Use EntrezGene (NCBI GeneID) as the default gene ID in the KEGG data files?" help="This is needed because KEGG uses different types default gene ID for different species. Some most common model species use EntrezGene, but majority of others use Locus tag." />
                <conditional name="node_color_select">
                    <param name="node_color_selector" type="select" label="Code molecular data as pseudo colors on the pathway graph?">
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <conditional name="data_select">
                            <param name="data_selector" type="select" label="Is the mapped molecular data gene.data or cpd.data?">
                                <option value="gene" selected="true">gene</option>
                                <option value="cpd">cpd</option>
                            </param>
                            <when value="gene">
                                <param name="gene_limit" type="float" value="0.5" label="Specify the limit value for gene.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data." />
                            </when>
                            <when value="cpd">
                                <param name="cpd_limit" type="float" value="1" label="Specify the limit value for cpd.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data."/>
                            </when>
                        </conditional>
                        <expand macro="node_param" />
                        <!--NO test cases for col.key, can't find parameters that works
                        Error in image.default(x = ckx, y = cky, z = cbind(data.cuts[-1]), col = cols,: plot.new has not been called yet Calls: col.key -> image -> image.default-->
                        <conditional name="col_key_select">
                            <param name="col_key_selector" type="select" label="Draw color key(s) for mapped molecular data on the pathway graph?">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <conditional name="cols_select">
                                    <param name="cols_selector" type="select" label="Specify a discrete spectrum of colors to be plotted as color key?" help="If an arguemeant is provided, the number of discrete colors has to match bins." >
                                        <option value="yes">Yes</option>
                                        <option value="no" selected="true">No</option>
                                    </param>
                                    <when value="yes">
                                        <param name="cols" type="data" format="tabular" label="Specify a discrete spectrum of colors to be plotted as color key" help="Dataframe with a column of colors" />
                                    </when>
                                    <when value="no"> </when>
                                </conditional>
                                <param name="size_by_graph" type="boolean" truevalue="true" falsevalue="" checked="true" label="Determine the sizes and exact location of the color key with respect to the size of the whole graph panel or that of a single node?" />
                                <param name="graph_width" type="float" value="" label="Width of the pathway graph panel" help="This is needed to determine the sizes and exact location of the color key"/>
                                <param name="graph_height" type="float" value="" label="Height of the pathway graph panel" help="This is needed to determine the sizes and exact location of the color key"/>
                                <param name="node_width" type="float" value="" label="Width of the the standard gene nodes (rectangles)" help="This is needed to determine the sizes and exact location of the color key" />
                                <param name="node_height" type="float" value="" label="Width of the the standard gene nodes (rectangles)" help="This is needed to determine the sizes and exact location of the color key" />
                                <param name="key_pos" type="select" label="How to control the position of color key(s)?>">
                                    <option value="bottomleft">bottomleft</option>
                                    <option value="bottomright">bottomright</option>
                                    <option value="topleft">topleft</option>
                                    <option value="topright" selected="true">topright</option>
                                </param>    
                                <param name="off_set_x" type="float" value="0" label="Specify the offset values in the x axes when plotting a new color key, as to avoid overlap with existing color keys or boundaries" help="Note that the off.sets value is reset and returned each time col.key function is called, as for the reference of plotting the next color key." />
                                <param name="off_set_y" type="float" value="0" label="Specify the offset values in the y axes when plotting a new color key, as to avoid overlap with existing color keys or boundaries" help="Note that the off.sets value is reset and returned each time col.key function is called, as for the reference of plotting the next color key." />
                                <param name="key_align" type="select" label="Value to control how the color keys are aligned when both gene.data and cpd.data are not NULL" >
                                    <option value="x">x</option>
                                    <option value="y">y</option>
                                </param>
                                <param name="cex" type="float" value="0.25" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                                <param name="lwd" type="float" value="1" label="Line width" help="A positive number" />
                            </when>
                            <when value="no"> </when>
                        </conditional>
                    </when>
                    <when value="no"> </when>
                </conditional>
            </when>
            <when value="no"> </when>
        </conditional>
        <conditional name="pathview_select">
            <param name="pathview_selector" type="select" label="Visualizes pathway based data integration?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <conditional name="data_select">
                    <param name="data_selector" type="select" label="Visualize gene data, cpd data, or both?" >
                        <option value="gene" selected="true">gene</option>
                        <option value="cpd">cpd</option>
                        <option value="both">both</option>
                    </param>
                    <when value="gene">
                        <conditional name="sim_data_select">
                            <param name="sim_data_selector" type="select" label="Simulate gene data?" help="Upload dataframe when no is selected">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <param name="id_type" type="text" optional="true" label="Molecular ID type" help="When molecular type is gene, proper ID types include KEGG and ENTREZ (Entrez Gene). Multiple other ID types are also valid When species is among 19 major species fully annotated in Bioconductor, e.g. hsa (human), mmu (mouse) etc, check: data(gene.idtype.bods); gene.idtype.bods for other valid ID types. When molecular type is cpd, check data(cpd.simtypes); cpd.simtypes for valid ID types." />
                                <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name). Gene data id.type has multiple other choices for 19 major research species, for details see gene.idtype.bods; gene.idtype.bods. When other species are specified, gene id.type is limited to KEGG and ENTREZ." />
                                <param name="discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Generate discrete or continuous data?" help="If yes is selected mol.data will be a charactor vector of molecular IDs." />
                                <param name="nmol" type="integer" value="1000" label="Target number of different molecules" help="Note that the specified id.type may not have as many different IDs as nmol. In this case, all IDs of id.type are used." />
                                <param name="nexp" type="integer" value="1" label="Sample size or the number of columns in the result simulated data" />
                                <param name="rand_seed" type="float" value="100" label="Seed number to start the random sampling process" help="This argumemnt makes the simulation reproducible as long as its value keeps the same." />
                                <param name="gene_data_output" type="boolean" truevalue="true" falsevalue="" checked="false" label="Save gene data?" />
                            </when>
                            <when value="no">
                                <param name="gene_data" type="data" format="tabular" label="Gene data" help="Dataframe with either one column of gene IDs and one numeric/character column (single sample) or a matrix-like data (multiple sample). Matrix-like data structure has genes as rows and samples as columns. Row names should be gene IDs. Here gene ID is a generic concepts, including multiple types of gene, transcript and protein uniquely mappable to KEGG gene IDs. KEGG ortholog IDs are also treated as gene IDs as to handle metagenomic data. Check details for mappable ID types. When single sample is used, the first column of the dataframe is the gene IDs and the second column is the data." />
                                <param name="data_type" type="select" label="Single or Multiple sample specified?" >
                                    <option value="single">Single</option>
                                    <option value="multiple">Multiple</option>
                                </param>
                            </when>
                        </conditional>
                        <param name="gene_limit" type="float" value="1" label="Specify the limit value for gene.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data." />
                        <expand macro="node_param" />
                    </when>
                    <when value="cpd"> 
                        <conditional name="sim_data_select">
                            <param name="sim_data_selector" type="select" label="Simulate cpd data?" help="Upload dataframe when no is selected">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <param name="id_type" type="text" optional="true" label="Molecular ID type" help="When molecular type is gene, proper ID types include KEGG and ENTREZ (Entrez Gene). Multiple other ID types are also valid When species is among 19 major species fully annotated in Bioconductor, e.g. hsa (human), mmu (mouse) etc, check: data(gene.idtype.bods); gene.idtype.bods for other valid ID types. When molecular type is cpd, check data(cpd.simtypes); cpd.simtypes for valid ID types." />
                                <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name). Gene data id.type has multiple other choices for 19 major research species, for details see gene.idtype.bods; gene.idtype.bods. When other species are specified, gene id.type is limited to KEGG and ENTREZ." />
                                <param name="discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Generate discrete or continuous data?" help="If yes is selected mol.data will be a charactor vector of molecular IDs." />
                                <param name="nmol" type="integer" value="1000" label="Target number of different molecules" help="Note that the specified id.type may not have as many different IDs as nmol. In this case, all IDs of id.type are used." />
                                <param name="nexp" type="integer" value="1" label="Sample size or the number of columns in the result simulated data" />
                                <param name="rand_seed" type="float" value="100" label="Seed number to start the random sampling process" help="This argumemnt makes the simulation reproducible as long as its value keeps the same." />
                                <param name="gene_cpd_output" type="boolean" truevalue="true" falsevalue="" checked="false" label="Save cpd data?" />
                            </when>
                            <when value="no">
                                <param name="cpd_data" type="data" format="tabular" label="cpd data" help="Dataframe with either one column of  IDs and one numeric/character column (single sample) or a matrix-like data (multiple sample). cpd data is named with IDs mappable to KEGG compound IDs. Over 20 types of IDs included in CHEMBL database can be used here. Check details for mappable ID types. When single sample is used, the first column of the dataframe is the IDs and the second column is the data." />
                                <param name="data_type" type="select" label="Single or Multiple sample specified?" >
                                    <option value="single">Single</option>
                                    <option value="multiple">Multiple</option>
                                </param>
                            </when>
                        </conditional>
                        <param name="cpd_limit" type="float" value="1" label="Specify the limit value for cpd.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data."/>
                        <expand macro="node_param" />
                    </when>
                    <when value="both">
                        <section name="gene_data" title="Gene data" expanded="true">
                            <conditional name="sim_gene_data_select">
                                <param name="sim_gene_data_selector" type="select" label="Simulate gene data?" help="Upload dataframe when no is selected">
                                    <option value="yes">Yes</option>
                                    <option value="no" selected="true">No</option>
                                </param>
                                <when value="yes">
                                    <param name="id_type" type="text" optional="true" label="Molecular ID type" help="When molecular type is gene, proper ID types include KEGG and ENTREZ (Entrez Gene). Multiple other ID types are also valid When species is among 19 major species fully annotated in Bioconductor, e.g. hsa (human), mmu (mouse) etc, check: data(gene.idtype.bods); gene.idtype.bods for other valid ID types. When molecular type is cpd, check data(cpd.simtypes); cpd.simtypes for valid ID types." />
                                    <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name). Gene data id.type has multiple other choices for 19 major research species, for details see gene.idtype.bods; gene.idtype.bods. When other species are specified, gene id.type is limited to KEGG and ENTREZ." />
                                    <param name="discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Generate discrete or continuous data?" help="If yes is selected mol.data will be a charactor vector of molecular IDs." />
                                    <param name="nmol" type="integer" value="1000" label="Target number of different molecules" help="Note that the specified id.type may not have as many different IDs as nmol. In this case, all IDs of id.type are used." />
                                    <param name="nexp" type="integer" value="1" label="Sample size or the number of columns in the result simulated data" />
                                    <param name="rand_seed" type="float" value="100" label="Seed number to start the random sampling process" help="This argumemnt makes the simulation reproducible as long as its value keeps the same." />
                                </when>
                                <when value="no">
                                    <param name="gene_data" type="data" format="tabular" label="Gene data" help="Dataframe with either one column of gene IDs and one numeric/character column (single sample) or a matrix-like data (multiple sample). Matrix-like data structure has genes as rows and samples as columns. Row names should be gene IDs. Here gene ID is a generic concepts, including multiple types of gene, transcript and protein uniquely mappable to KEGG gene IDs. KEGG ortholog IDs are also treated as gene IDs as to handle metagenomic data. Check details for mappable ID types. When single sample is used, the first column of the dataframe is the gene IDs and the second column is the data." />
                                    <param name="gene_data_type" type="select" label="Single or Multiple sample specified?" >
                                        <option value="single">Single</option>
                                        <option value="multiple">Multiple</option>
                                    </param>
                                </when>
                            </conditional>
                            <param name="gene_limit" type="float" value="1" label="Specify the limit value for gene.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data." />
                            <param name="gene_discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Treat the molecular data or node summary data as discrete?" help="If no is selected, mol.data will be a charactor vector of molecular IDs"/>
                            <param name="gene_bin" type="integer" value="10" label="Specify the number of levels or bins for gene.data or cpd.data when converting them to pseudo colors" />
                            <param name="gene_both_dirs" type="boolean" truevalue="true" falsevalue="" checked="true" label="gene.data or cpd.data is a 1 directional data when converting them to pseudo colors?" />
                            <param name="gene_low" type="text" value="green" label="Specify the low color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="gene_mid" type="text" value="gray" label="Specify the mid color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="gene_high" type="text" value="red" label="Specify the high color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="gene_na_col" type="text" value="transparent" label="Color used for NA's or missing values in gene.data or cpd.data" />
                            <param name="gene_trans_fun" type="select" label="How should gene.data and cpd.data be transformed?">
                              <option value="none">no transformation</option>
                              <option value="log">log transformation</option>
                              <option value="abs">abs transformation</option>
                            </param>
                        </section>
                        <section name="cpd_data" title="cpd data" expanded="true">
                            <conditional name="sim_cpd_data_select">
                                <param name="sim_cpd_data_selector" type="select" label="Simulate cpd data?" help="Upload dataframe when no is selected">
                                    <option value="yes">Yes</option>
                                    <option value="no" selected="true">No</option>
                                </param>
                                <when value="yes">
                                    <param name="id_type" type="text" optional="true" label="Molecular ID type" help="When molecular type is gene, proper ID types include KEGG and ENTREZ (Entrez Gene). Multiple other ID types are also valid When species is among 19 major species fully annotated in Bioconductor, e.g. hsa (human), mmu (mouse) etc, check: data(gene.idtype.bods); gene.idtype.bods for other valid ID types. When molecular type is cpd, check data(cpd.simtypes); cpd.simtypes for valid ID types." />
                                    <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name). Gene data id.type has multiple other choices for 19 major research species, for details see gene.idtype.bods; gene.idtype.bods. When other species are specified, gene id.type is limited to KEGG and ENTREZ." />
                                    <param name="discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Generate discrete or continuous data?" help="If yes is selected mol.data will be a charactor vector of molecular IDs." />
                                    <param name="nmol" type="integer" value="1000" label="Target number of different molecules" help="Note that the specified id.type may not have as many different IDs as nmol. In this case, all IDs of id.type are used." />
                                    <param name="nexp" type="integer" value="1" label="Sample size or the number of columns in the result simulated data" />
                                    <param name="rand_seed" type="float" value="100" label="Seed number to start the random sampling process" help="This argumemnt makes the simulation reproducible as long as its value keeps the same." />
                                </when>
                                <when value="no">
                                    <param name="cpd_data" type="data" format="tabular" label="cpd data" help="Dataframe with either one column of  IDs and one numeric/character column (single sample) or a matrix-like data (multiple sample). cpd data is named with IDs mappable to KEGG compound IDs. Over 20 types of IDs included in CHEMBL database can be used here. Check details for mappable ID types. When single sample is used, the first column of the dataframe is the IDs and the second column is the data." />
                                    <param name="cpd_data_type" type="select" label="Single or Multiple sample specified?" >
                                        <option value="single">Single</option>
                                        <option value="multiple">Multiple</option>
                                    </param>
                                </when>
                            </conditional>
                            <param name="cpd_limit" type="float" value="1" label="Specify the limit value for cpd.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data."/>
                            <param name="cpd_discrete" type="boolean" truevalue="true" falsevalue="" checked="false" label="Treat the molecular data or node summary data as discrete?" help="If no is selected, mol.data will be a charactor vector of molecular IDs"/>
                            <param name="cpd_bin" type="integer" value="10" label="Specify the number of levels or bins for gene.data or cpd.data when converting them to pseudo colors" />
                            <param name="cpd_both_dirs" type="boolean" truevalue="true" falsevalue="" checked="true" label="gene.data or cpd.data is a 1 directional data when converting them to pseudo colors?" />
                            <param name="cpd_low" type="text" value="green" label="Specify the low color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="cpd_mid" type="text" value="gray" label="Specify the mid color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="cpd_high" type="text" value="red" label="Specify the high color spectra to code gene.data or cpd.data" help="When data are 1 directional (TRUE value in both.dirs), only mid and high are used to specify the color spectra. The color values can be given as color names (red), plot color index (2=red), and HTML-style RGB, (#FF0000)." />
                            <param name="cpd_na_col" type="text" value="transparent" label="Color used for NA's or missing values in gene.data or cpd.data" />
                            <param name="cpd_trans_fun" type="select" label="How should gene.data and cpd.data be transformed?">
                              <option value="none">no transformation</option>
                              <option value="log">log transformation</option>
                              <option value="abs">abs transformation</option>
                            </param>
                        </section>
                    </when>
                </conditional>
                <conditional name="pathway_id_select">
                    <param name="pathway_id_selector" type="select" label="Specify a single or multiple KEGG pathway ID(s)?">
                        <option value="single">Single</option>
                        <option value="multiple">Multiple</option>
                    </param>
                    <when value="single">
                        <param name="pathway_id" type="text" label="KEGG pathway ID" help="usually 5 digit, may also include the 3 letter KEGG species code." />
                    </when>
                    <when value="multiple">
                        <param name="pathway_id" type="data" format="tabular" label="KEGG pathway ID" help="Dataframe with one column of IDs. Usually 5 digit, may also include the 3 letter KEGG species code." />
                    </when>
                </conditional>
                <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name)." />
                <param name="cpd_idtype" type="text" value="kegg" label="ID type used for cpd.data" />
                <param name="gene_idtype" type="text" value="entrez" label="ID type used for gene.data" help="For species other than Entrez Gene, gene.idtype should be set to KEGG as KEGG use other types of gene IDs." />
                <param name="gene_annotpkg" type="text" optional="true" label="Name of the annotation package to use for mapping between other gene ID types including symbols and Entrez gene ID" />
                <param name="min_nnodes" type="integer" value="3" label="Minimal number of nodes of type gene, enzyme, compound or ortholog for a pathway to be considered" /> 
                <conditional name="kegg_native_select">
                    <param name="kegg_native_selector" type="select" label="Render pathway graph as native KEGG graph (.png) or using graphviz layout engine (.pdf)?">
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </param>
                    <when value="yes">
                        <conditional name="same_layer_select">
                            <param name="same_layer_selector" type="select" label="Control plotting layers?" help="1) if node colors be plotted in the same layer as the pathway graph when kegg.native=TRUE">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </param>
                            <when value="yes">
                                <param name="map_symbol" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map gene IDs to symbols for gene node labels?" help="If no selected, the graphic name from the KGML file will be used." />
                            </when>
                            <when value="no"> </when>
                        </conditional>
                        <param name="res" type="integer" value="300" label="The nominal resolution" help="In ppi which will be recorded in the bitmap file, if a positive integer. Also used for ’units’ other than the default, and to convert points to pixels" />
                        <param name="cex" type="float" value="0.25" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                    </when>
                    <when value="no">
                         <param name="expand_node" type="boolean" truevalue="true" falsevalue="" checked="false" label="Expand multiple-gene nodes into single-gene nodes?" help="Each expanded single-gene nodes inherits all edges from the original multiplegene node. This option only affects graphviz graph view, i.e. when kegg.native=FALSE. This option is not effective for most metabolic pathways where it conflits with converting reactions to edges." />
                         <param name="split_group" type="boolean" truevalue="true" falsevalue="" checked="false" label="Split node groups to individual nodes?" help="Each split member nodes inherits all edges from the node group. This option only affects graphviz graph view, i.e. when kegg.native=FALSE. This option also effects most metabolic pathways even without group nodes defined orginally. For these pathways, genes involved in the same reaction are grouped automatically when converting reactions to edges unless split.group=TRUE" />
                        <param name="map_cpdname" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map compound IDs to formal names for compound node labels?" help="If no selected the graphic name from the KGML file (KEGG compound accessions) will be used. This option is only effective for kegg.native=FALSE. When kegg.native=TRUE, the native KEGG labels will be kept." />
                        <param name="same_layer" type="boolean" truevalue="true" falsevalue="" checked="true" label="Control plotting layers?" help="1) if node colors be plotted in the same layer as the pathway graph when kegg.native=TRUE, 2) if edge/node type legend be plotted in the same page when kegg.native=FALSE" />
                        <param name="cex" type="float" value="0.5" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                        <param name="sign_pos" type="select" label="How to control the position of pathview signature?">
                            <option value="bottomleft">bottomleft</option>
                            <option value="bottomright" selected="true">bottomright</option>
                            <option value="topleft">topleft</option>
                            <option value="topright">topright</option>
                        </param>
                        <!--<param name="path_graph" type="data" format="png" label="Graph object parsed from KGML file" />-->
                        <param name="pdf_width" type="float" value="7" label="Width of the pathway graph pdf file" help="Note that pdf width increase by half when same.layer=TRUE to accommodate legends." />
                        <param name="pdf_height" type="float" value="7" label="Height of the pathway graph pdf file" help="Note that pdf width increase by half when same.layer=TRUE to accommodate legends." />
                        <param name="rankdir" type="select" label="Specify the pathway graph layout direction">
                            <option value="LR">left to right</option>
                            <option value="TB">top to bottom</option>
                        </param>
                        <param name="is_signal" type="boolean" truevalue="true" falsevalue="" checked="true" label="Drop all the unconnected nodes if the pathway is treated as a signaling pathway?" help="This argument also affect the graph layout type, i.e. dot for signals or neato otherwise."/> 
                        <param name="afactor" type="float" value="1" label="Node amplifying factor" help="This argument is for node size fine-tuning, its effect is subtler than expected."/>
                        <param name="text_width" type="float" value="15" label="Specify the line width for text wrap" />
                        <param name="cpd_lab_offset" type="float" value="1.0" label="Specify how much compound labels should be put above the default position or node center" help="This argument is useful when map.cpdname=TRUE, i.e. compounds are labelled by full name, which affects the look of compound nodes and color."/>
                    </when>
                </conditional>
                <param name="map_null" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map the NULL gene.data or cpd.data to pathway?" help="When NULL data are mapped, the gene or compound nodes in the pathway will be rendered as actually mapped nodes, except with NA-valued color. When NULL data are not mapped, the nodes are rendered as unmapped nodes. This argument mainly affects native KEGG graph view" />
                <param name="node_sum" type="select" label="Specify the method name to calculate node summary given that multiple genes or compounds are mapped to it" >
                  <option value="sum">sum</option>
                  <option value="mean">mean</option>
                  <option value="max">max</option>
                  <option value="max_abs">max.abs</option>
                  <option value="random">random</option>
                </param>
                <param name="out_suffix" type="text" value="pathview" label="The suffix to be added after the pathway name as part of the output graph file" help="Sample names or column names of the gene.data or cpd.data are also added when there are multiple samples." />
                <param name="key_align" type="select" label="Value to control how the color keys are aligned when both gene.data and cpd.data are not NULL" >
                    <option value="x">x</option>
                    <option value="y">y</option>
                </param>
                <param name="key_pos" type="select" label="How to control the position of color key(s)?>">
                    <option value="bottomleft">bottomleft</option>
                    <option value="bottomright">bottomright</option>
                    <option value="topleft">topleft</option>
                    <option value="topright" selected="true">topright</option>
                </param>
                <param name="multi_state" type="boolean" truevalue="true" falsevalue="" checked="true"

                multi.state logical, whether multiple states (samples or columns) gene.data or cpd.data
should be integrated and plotted in the same graph. Default match.data=TRUE.
In other words, gene or compound nodes will be sliced into multiple pieces corresponding
to the number of states in the data.
match.data logical, whether the samples of gene.data and cpd.data are paired. Default
match.data=TRUE. When let sample sizes of gene.data and cpd.data be m and
n, when m>n, extra columns of NA’s (mapped to no color) will be added to
cpd.data as to make the sample size the same. This will result in the smae number
of slice in gene nodes and compound when multi.state=TRUE.
            </when>
            <when value="no"> </when>
        </conditional>
    </inputs>

    <outputs>
        <data name="kegg_names_output" format="txt" label="node.info on ${on_string}: kegg.names output" >
            <filter>output == "kegg.names"</filter>
        </data>
        <data name="type_output" format="txt" label="node.info on ${on_string}: type output" >
            <filter>output == "type"</filter>
        </data>
        <data name="component_output" format="txt" label="node.info on ${on_string}: component output" >
            <filter>output == "component"</filter>
        </data>
        <data name="size_output" format="txt" label="node.info on ${on_string}: size output" >
            <filter>output == "size"</filter>
        </data>
        <data name="labels_output" format="txt" label="node.info on ${on_string}: labels output" >
            <filter>output == "labels"</filter>
        </data>
        <data name="shape_output" format="txt" label="node.info on ${on_string}: shape output" >
            <filter>output == "shape"</filter>
        </data>
        <data name="x_output" format="txt" label="node.info on ${on_string}: x output" >
            <filter>output == "x"</filter>
        </data>
        <data name="y_output" format="txt" label="node.info on ${on_string}: y output" >
            <filter>output == "y"</filter>
        </data>
        <data name="width_output" format="txt" label="node.info on ${on_string}: width output" >
            <filter>output == "width"</filter>
        </data>
        <data name="height_output" format="txt" label="node.info on ${on_string}: height output" >
            <filter>output == "height"</filter>
        </data>
        <data name="node_map_output" format="txt" label="node.map on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes"</filter>
        </data>
        <data name="node_color_output" format="txt" label="node.color on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes" and node_map_select['node_color_select']['node_color_selector'] == "yes"</filter>
        </data>
        <data name="col_key_output" format="png" label="col.key on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes" and node_map_select['node_color_select']['node_color_selector'] == "yes" and node_map_select['node_color_select']['col_key_select']['col_key_selector'] == "yes"</filter>
        </data>
        <data name="png_output1" format="png" label="pathview on ${on_string}: png output">
            <filter>pathview_select['pathview_selector'] == "yes" and pathview_select['kegg_native_select']['kegg_native_selector'] == "yes"</filter>
        </data>
        <data name="png_output2" format="png" label="pathview on ${on_string}: png output">
            <filter>pathview_select['pathview_selector'] == "yes" and pathview_select['kegg_native_select']['kegg_native_selector'] == "yes"</filter>
        </data>
        <data name="pdf_output" format="pdf" label="pathview on ${on_string}: pdf output">
            <filter>pathview_select['pathview_selector'] == "yes" and pathview_select['kegg_native_select']['kegg_native_selector'] == "no"</filter>
        </data>
        <data name="xml_output" format="xml" label="${tool.name} on ${on_string}: xml output">
            <filter>pathview_select['pathview_selector'] == "yes"</filter>
        </data>
    </outputs>

    <tests>
        <!--<test expect_num_outputs="1">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="no" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
        </test>
        <test expect_num_outputs="2">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="no" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output1.txt" />
        </test>
        <test expect_num_outputs="2">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="yes" />
                    <param name="mol_data" value="mol_data.tabular" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
             <conditional name="node_color_select">
                <param name="node_color_selector" value="no" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output2.txt" />
        </test>
        <test expect_num_outputs="3">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="yes" />
                    <param name="mol_data" value="mol_data.tabular" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
             <conditional name="node_color_select">
                <param name="node_color_selector" value="yes" />
                <param name="discrete" value="false" />
                <conditional name="data_select">
                    <param name="data_selector" value="cpd" />
                    <param name="cpd_limit" value="1" />
                </conditional>
                <param name="bin" value="10" />
                <param name="both_dirs" value="true" />
                <param name="low" value="green" />
                <param name="mid" value="gray" />
                <param name="high" value="red" />
                <param name="na_col" value="transparent" />
                <param name="trans_fun" value="none"/>
            </conditional>
            <conditional name="pathview_select">
                <param name="pathview_selector" value="no" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output2.txt" />
            <output name="node_color_output" value="node_color_output.txt" />
        </test>
        <test expect_num_outputs="4">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="no" />
            </conditional>
            <conditional name="pathview_select">
                <param name="pathview_selector" value="yes" />
                <conditional name="data_select">
                    <param name="data_selector" value="gene" />
                    <conditional name="sim_data_select">
                        <param name="sim_data_selector" value="no" />
                        <param name="gene_data" value="gene_data.tabular" />
                        <param name="data_type" value="single" />
                    </conditional>
                    <param name="gene_limit" value="1" />
                    <param name="discrete" value="false" />
                    <param name="bin" value="10" />
                    <param name="both_dirs" value="true" />
                    <param name="low" value="green" />
                    <param name="mid" value="gray" />
                    <param name="high" value="red" />
                    <param name="na_col" value="transparent" />
                    <param name="trans_fun" value="none" />
                </conditional>
                <conditional name="pathway_id_select">
                    <param name="pathway_id_selector" value="single" />
                    <param name="pathway_id" value="04110" />
                </conditional>
                <param name="species" value="hsa" />
                <param name="cpd_idtype" value="kegg" />
                <param name="gene_idtype" value="entrez"    />
                <param name="gene_annotpkg" value="" />
                <param name="min_nnodes" value="3" /> 
                <conditional name="kegg_native_select">
                    <param name="kegg_native_selector" value="yes" />
                        <conditional name="same_layer_select">
                            <param name="same_layer_selector" value="yes" />
                            <param name="map_symbol" value="true" />
                        </conditional>
                        <param name="res" value="300" />
                        <param name="cex" value="0.25" />
                </conditional>
                <param name="map_null" value="true" />
                <param name="node_sum" value="sum" />
                <param name="out_suffix" value="gse16873" />
                <param name="key_align" value="x" />
                <param name="key_pos" value="topright" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="png_output1" value="pathview_gene_output1.png" />
            <output name="png_output2" value="pathview_gene_output2.png" />
            <output name="xml_output" value="pathview_gene.xml" />
        </test>-->
        <test expect_num_outputs="3">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="no" />
            </conditional>
            <conditional name="pathview_select">
                <param name="pathview_selector" value="yes" />
                <conditional name="data_select">
                    <param name="data_selector" value="gene" />
                    <conditional name="sim_data_select">
                        <param name="sim_data_selector" value="no" />
                        <param name="gene_data" value="gene_data.tabular" />
                        <param name="data_type" value="single" />
                    </conditional>
                    <param name="gene_limit" value="1" />
                    <param name="discrete" value="false" />
                    <param name="bin" value="10" />
                    <param name="both_dirs" value="true" />
                    <param name="low" value="green" />
                    <param name="mid" value="gray" />
                    <param name="high" value="red" />
                    <param name="na_col" value="transparent" />
                    <param name="trans_fun" value="none" />
                </conditional>
                <conditional name="pathway_id_select">
                    <param name="pathway_id_selector" value="single" />
                    <param name="pathway_id" value="04110" />
                </conditional>
                <param name="species" value="hsa" />
                <param name="cpd_idtype" value="kegg" />
                <param name="gene_idtype" value="entrez"    />
                <param name="gene_annotpkg" value="" />
                <param name="min_nnodes" value="3" /> 
                <conditional name="kegg_native_select">
                    <param name="kegg_native_selector" value="no" />
                    <param name="expand_node" value="false"/>
                    <param name="split_group" value="false" />
                    <param name="map_cpdname" value="true" />
                    <param name="same_layer" value="true" />
                    <param name="cex" value="0.5" />
                    <param name="sign_pos" value="bottomleft" />
                    <param name="pdf_width" value="7" />
                    <param name="pdf_height" value="7" />
                    <param name="rankdir" value="LR" />
                    <param name="is_signal" value="true" /> 
                    <param name="afactor" value="1" />
                    <param name="text_width" value="15" />
                    <param name="cpd_lab_offset" value="1.0" />
                </conditional>
                <param name="map_null" value="true" />
                <param name="node_sum" value="sum" />
                <param name="out_suffix" value="gse16873" />
                <param name="key_align" value="x" />
                <param name="key_pos" value="bottomleft" />
            </conditional>
            <output name="pdf_output" value="pathview_pdf_output.pdf" />
            <output name="xml_output" value="pathview_gene2.xml" />
        </test>
        <!--<test expect_num_outputs="4">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="no" />
            </conditional>
            <conditional name="pathview_select">
                <param name="pathview_selector" value="yes" />
                <conditional name="data_select">
                    <param name="data_selector" value="both" />
                    <section name="gene_data">
                        <conditional name="sim_gene_data_select">
                            <param name="sim_gene_data_selector" value="no"/>
                            <param name="gene_data" value="gene_data.tabular" />
                            <param name="gene_data_type" value="single"/>
                        </conditional>
                        <param name="gene_limit" value="1" />
                        <param name="gene_discrete" value="false" />
                        <param name="gene_bin" value="10" />
                        <param name="gene_both_dirs" value="true" />
                        <param name="gene_low" value="green" />
                        <param name="gene_mid" value="gray" />
                        <param name="gene_high" value="red" />
                        <param name="gene_na_col" value="transparent" />
                        <param name="gene_trans_fun" value="none" />
                    </section>
                    <section name="cpd_data">
                        <conditional name="sim_cpd_data_select">
                            <param name="sim_cpd_data_selector" value="yes" />
                            <param name="id_type" value="" />
                            <param name="species" value="hsa" />
                            <param name="discrete" value="false" />
                            <param name="nmol" value="3000"/>
                            <param name="nexp" value="1" />
                            <param name="rand_seed" value="100" />
                        </conditional>
                        <param name="cpd_limit" value="1" />
                        <param name="cpd_discrete" value="false" />
                        <param name="cpd_bin" value="10" />
                        <param name="cpd_both_dirs" value="true" />
                        <param name="cpd_low" value="green" />
                        <param name="cpd_mid" value="gray" />
                        <param name="cpd_high" value="red" />
                        <param name="cpd_na_col" value="transparent" />
                        <param name="cpd_trans_fun" value="none" />
                    </section>
                </conditional>
                <conditional name="pathway_id_select">
                    <param name="pathway_id_selector" value="single" />
                    <param name="pathway_id" value="00640" />
                </conditional>
                <param name="species" value="hsa" />
                <param name="cpd_idtype" value="kegg" />
                <param name="gene_idtype" value="entrez"    />
                <param name="gene_annotpkg" value="" />
                <param name="min_nnodes" value="3" /> 
                <conditional name="kegg_native_select">
                    <param name="kegg_native_selector" value="yes" />
                        <conditional name="same_layer_select">
                            <param name="same_layer_selector" value="yes" />
                            <param name="map_symbol" value="true" />
                        </conditional>
                        <param name="res" value="300" />
                        <param name="cex" value="0.25" />
                </conditional>
                <param name="map_null" value="true" />
                <param name="node_sum" value="sum" />
                <param name="out_suffix" value="gse16873_cpd" />
                <param name="key_align" value="y" />
                <param name="key_pos" value="bottomleft" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="png_output1" value="pathview_gene_cpd_output1.png" />
            <output name="png_output2" value="pathview_gene_cpd_output2.png" />
            <output name="xml_output" value="pathview_gene_cpd.xml" />
        </test>-->

        <!--Need to test multiple states in one graph pg 24 in manual-->
    </tests>

    <help><![CDATA[
Extract node information from KEGG pathway
===========================================================================================================================================

The parser function, parser KGML file and/or extract node information from KEGG pathway.
Parser function node.info extract node data from parsed KEGG pathways. KGML files are parsed using parseKGML2 and KEGGpathway2Graph2. These functions from KEGGgraph package have been heavily modified for reaction parsing and conversion to edges.

It returns:

- a named list of 10 elements: "kegg.names", "type", "component", "size", "labels", "shape", "x", "y", "width" and "height". Each elements record the corresponding attribute for all nodes in the parsed KEGG pathway.

Mapping molecular data(gene expression, metabolite abundance etc)to nodes in KEGG pathway
===========================================================================================================================================

If map molecular data onto KEGG pathway nodes is selected.

Mapper function node.map maps user supplied molecular data to KEGG pathways. This function takes standard KEGG molecular IDs (Entrez Gene ID or KEGG Compound Accession) and map them to pathway nodes. None KEGG molecular gene IDs or Compound IDs are pre-mapped to standard KEGG IDs by calling another function mol.sum. When multiple molecules map to one node, the corresponding molecular data are summarized into a single node summary by calling function specified by node.sum. This mapped node summary data together with the parsed KGML data are then returned for further processing. Proper input data include: gene expression, protein expression, genetic association, metabolite abundance, genomic data, literature, and other data types mappable to pathways. The input mol.data may be NULL, then no molecular data are actually mapped, but all nodes of the specified node.type are considered "mappable" and their parsed KGML data returned.

It returns:

A dataframe of parsed KGML data and summary molecular data for each mapped node with the columns:

- `kegg.names:` standard KEGG IDs/Names for mapped nodes. It’s Entrez Gene ID or KEGG Compound Accessions.
- `labels:` Node labels to be used when needed
- `type:` node type, currently 4 types are supported: "gene","enzyme", "compound" and "ortholog".
- `x:` x coordinate in the original KEGG pathway graph.
- `y:` y coordinate in the original KEGG pathway graph.
- `width:` node width in the original KEGG pathway graph.
- `height:` node height in the original KEGG pathway graph.
- `other:` columns columns of the mapped gene/compound data

Converts the mapped molecular data
===========================================================================================================================================

If code molecular data as pseudo colors on the pathway graph is selected, the function node.color converts the mapped molecular data (gene.data or cpd.data) by node.map function into pseudo colors, which then can be plotted on the pathway graph. col.key is used in combination with node.color in pathview, although this function can be used independently for similar tasks.

It returns:

- dataframe with one column or a matrix of colors. Its dimensionality is the same as the corresponding gene.data or cpd.data. col.key plots a color key on existing pathway graph, then returns a updated version of off.sets for the reference of next color key.

If draw color key(s) for mapped molecular data on the pathway graph is selected.

It returns:

- png image file


Pathway based data integration and visualization
===========================================================================================================================================

Pathview maps and renders user data on relevant pathway graphs. All users need is to supply their gene or compound data and specify the target pathway. Pathview automatically downloads the pathway graph data, parses the data file, maps user data to the pathway, and render pathway graph with the mapped data. Pathview generates both native KEGG view and Graphviz views for pathways. 

keggview.native and keggview.graph are the two viewer functions, and pathview is the main function providing a unified interface to downloader, parser, mapper and viewer functions.

Pathview maps and renders user data on relevant pathway graphs. Pathview is a stand alone program for pathway based data integration and visualization. It also seamlessly integrates with pathway and functional analysis tools for large-scale and fully automated analysis. Pathview provides strong support for data Integration. It works with: 1) essentially all types of biological data mappable to
pathways, 2) over 10 types of gene or protein IDs, and 20 types of compound or metabolite IDs, 3) pathways for over 2000 species as well as KEGG orthology, 4) varoius data attributes and formats, i.e. continuous/discrete data, matrices/vectors, single/multiple samples etc. To see mappable external gene/protein IDs do: data(gene.idtype.list), to see mappable external compound related IDs do: data(rn.list); names(rn.list). Pathview generates both native KEGG view and Graphviz views for pathways. Currently only KEGG pathways are implemented. Hopefully, pathways from Reactome, NCI and other databases will be supported in the future.

It returns:

Pathview can accept either a single pathway or multiple pathway ids. The result returned by pathview function is a named list corresponding to the input pathway ids. Each element (for each pathway itself is a named list, with 2 elements ("plot.data.gene", "plot.data.cpd").

Both elements are data.frame or NULL depends on the corresponding input data gene.data and cpd.data. These data.frames record the plot data for mapped gene or compound nodes: rows are mapped genes/compounds, columns are:

- `kegg.names:` standard KEGG IDs/Names for mapped nodes. It’s Entrez Gene ID or KEGG Compound Accessions.
- `labels:` Node labels to be used when needed.
- `all.mapped:` All molecule (gene or compound) IDs mapped to this node.
- `type:` node type, currently 4 types are supported: "gene","enzyme", "compound" and "ortholog".
- `x:` x coordinate in the original KEGG pathway graph.
- `y:` y coordinate in the original KEGG pathway graph.
- `width:` node width in the original KEGG pathway graph.
- `height:` node height in the original KEGG pathway graph.
- `other columns:` 1 columns of the mapped gene/compound data and corresponding pseudo-color codes for individual samples

The results returned by keggview.native and codekeggview.graph are both a list of graph plotting parameters. These are not intended to be used externally.

    ]]></help>
    <expand macro="citations" />
</tool>