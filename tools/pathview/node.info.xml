<tool id="pathview_node.info" name="node.info" version="@VERSION@.0">
    <description>extracts node information</description>
     <macros>
       <import>pathview_macros.xml</import>
    </macros>

    <requirements>
        <requirement type="package" version="@VERSION@">bioconductor-pathview</requirement>
    </requirements>

    <command detect_errors="exit_code"><![CDATA[
        Rscript '$script'
    ]]></command>

    <configfiles>
        <configfile name="script"><![CDATA[
## Setup R error handling to go to stderr
options(show.error.messages=F, error=function(){cat(geterrmessage(),file=stderr());q("no",1,F)})
loc <- Sys.setlocale("LC_MESSAGES", "en_US.UTF-8")

## Import library
library(pathview)

object <- "$object"

#if str($short_name) != ""
    short_name <- TRUE
#else
    short_name <- FALSE
#end if

data <- node.info(object, short.name = short_name)

#if str($output) == "kegg.names"
    write.table(unlist(data[1]), "$kegg_names_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "type"
    write.table(unlist(data[2]), "$type_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "component"
    write.table(unlist(data[3]), "$component_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "size"
    write.table(unlist(data[4]), "$size_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "labels"
    write.table(unlist(data[5]), "$labels_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "shape"
    write.table(unlist(data[6]), "$shape_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "x"
    write.table(unlist(data[7]), "$x_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "y"
    write.table(unlist(data[8]), "$y_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "width"
    write.table(unlist(data[9]), "$width_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if
#if str($output) == "height"
    write.table(unlist(data[10]), "$height_output", row.name=FALSE, col.name=FALSE, quote=FALSE)
#end if

#if str($node_map_select.node_map_selector) == "yes"
    #if str($node_map_select.mol_data_select.mol_data_selector) == "yes"
        mol_data <- scan("$node_map_select.mol_data_select.mol_data", what=character())
    #else
        mol_data <- NULL
    #end if
    node_types <- "$node_map_select.node_types"
    node_sum <- "$node_map_select.node_sum"
    #if str($node_map_select.entrez_gnodes) != ""
        entrez_gnodes <- TRUE
    #else
        entrez_gnodes <- FALSE
    #end if

    result <- node.map(mol.data = mol_data, data, node.types = node_types, node.sum = node_sum, entrez.gnodes=entrez_gnodes)

    write.table(result, "$node_map_output", row.name=FALSE, col.name=TRUE, quote=FALSE)

    #if str($node_map_select.node_color_select.node_color_selector) == "yes"
        #if str($node_map_select.node_color_select.discrete) != ""
            discrete <- TRUE
        #else 
            discrete <- FALSE
        #end if

        #if str($node_map_select.node_color_select.data_select) == "gene"
            limit <- as.numeric("$node_map_select.node_color_select.data_select.gene_limit")
        #else
            limit <- as.numeric("$node_map_select.node_color_select.data_select.cpd_limit")
        #end if
        bins <- as.numeric("$node_map_select.node_color_select.bin")

        #if str($node_map_select.node_color_select.both_dirs) != ""
            both_dirs <- TRUE
        #end if
        low <- "$node_map_select.node_color_select.low"
        mid <- "$node_map_select.node_color_select.mid"
        high <- "$node_map_select.node_color_select.high"
        na_col <- "$node_map_select.node_color_select.na_col"

        #if str($node_map_select.node_color_select.trans_fun) != "none"
            trans_fun <- "$node_map_select.node_color_select.trans_fun"
        #else
            trans_fun <- NULL
        #end if

        node_color <- node.color(plot.data = result, discrete=discrete, limit=limit, bins=bins, both.dirs = both_dirs, low = low, mid = mid, high = high, na.col = na_col, trans.fun = trans_fun)

        write.table(node_color, "$node_color_output", row.name=FALSE, col.name=FALSE, quote=FALSE)

        #if str($node_map_select.node_color_select.col_key_select.col_key_selector) == "yes"
            #if str($node_map_select.node_color_select.col_key_select.cols_select.cols_selector) == "yes"
                cols <- scan("$node_map_select.node_color_select.col_key_select.cols_select.cols", what=character())
            #else
                cols <- NULL
            #end if
            graph_width <- as.numeric("$node_map_select.node_color_select.col_key_select.graph_width")
            graph_height <- as.numeric("$node_map_select.node_color_select.col_key_select.graph_height")
            graph_size <- c(graph_width, graph_height)
            node_width <- as.numeric("$node_map_select.node_color_select.col_key_select.node_width")
            node_height <- as.numeric("$node_map_select.node_color_select.col_key_select.node_height")
            node_size <- c(node_width, node_height)
            #if str($node_map_select.node_color_select.col_key_select.size_by_graph) != ""
                size_by_graph <- TRUE
            #else
                size_by_graph <- FALSE
            #end if
            key_pos <- "$node_map_select.node_color_select.col_key_select.key_pos"
            off_set_x <- as.numeric("$node_map_select.node_color_select.col_key_select.off_set_x")
            off_set_y <- as.numeric("$node_map_select.node_color_select.col_key_select.off_set_y")
            off_sets <- c(x = off_set_x, y = off_set_y)
            align <- "$node_map_select.node_color_select.col_key_select.key_align"
            cex <- as.numeric("$node_map_select.node_color_select.col_key_select.cex")
            lwd <- as.numeric("$node_map_select.node_color_select.col_key_select.lwd")

            sink("$col_key_output")
                col.key(discrete= discrete, limit = limit, bins = bins, cols = cols, both.dirs = both_dirs, low = low, mid = mid, high = high, graph.size = graph_size, node.size, size.by.graph = FALSE, key.pos = key_pos, off.sets = off_sets, align = align, cex = cex, lwd = lwd)
            sink()
    #end if
#end if


]]>
        </configfile>
    </configfiles>
    <inputs>
        <param name="object" type="data" format="xml" label="KGML file" />
        <param name="short_name" type="boolean" truevalue="true" falsevalue="" checked="true" label="Short labels" help="i.e. the first iterm separated by a comma in the long labels are parsed out as node labels" />
        <param name="output" type="select" label="Which extracted node information to output?" >
            <option value="kegg.names">kegg.names</option>
            <option value="type">type</option>
            <option value="component">component</option>
            <option value="size">size</option>
            <option value="labels">labels</option>
            <option value="shape">shape</option>
            <option value="x">x</option>
            <option value="y">y</option>
            <option value="width">width</option>
            <option value="height">height</option>
        </param>
        <conditional name="node_map_select">
            <param name="node_map_selector" type="select" label="Map molecular data onto KEGG pathway nodes?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" type="select" label="Specify mol data?">
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <param name="mol_data" type="data" format="tabular" label="mol data" help="Either a dataframe with one numeric column labeled with molecule IDs as names (single sample) or a matrix-like data (multiple sample)." />
                    </when>
                    <when value="no"> </when>
                </conditional>
                <param name="node_types" type="select" label="Specify the node type to map to the mol data" >
                    <option value="gene">Gene</option>
                    <option value="compound">Compound</option>
                    <option value="ortholog">Ortholog</option>
                </param>
                <param name="node_sum" type="select" label="Specify the method name to calculate node summary given that multiple genes or compounds are mapped to it" >
                    <option value="sum">sum</option>
                    <option value="mean">mean</option>
                    <option value="max">max</option>
                    <option value="max_abs">max.abs</option>
                    <option value="random">random</option>
                </param>
                <param name="entrez_gnodes" type="boolean" truevalue="true" falsevalue="" checked="true" label="Use EntrezGene (NCBI GeneID) as the default gene ID in the KEGG data files?" help="This is needed because KEGG uses different types default gene ID for different species. Some most common model species use EntrezGene, but majority of others use Locus tag." />
                <conditional name="node_color_select">
                    <param name="node_color_selector" type="select" label="Code molecular data as pseudo colors on the pathway graph?">
                        <option value="yes">Yes</option>
                        <option value="no" selected="true">No</option>
                    </param>
                    <when value="yes">
                        <conditional name="data_select">
                            <param name="data_selector" type="select" label="Is the mapped molecular data gene.data or cpd.data?">
                                <option value="gene">gene</option>
                                <option value="cpd">cpd</option>
                            </param>
                            <when value="gene">
                                <param name="gene_limit" type="float" value="0.5" label="Specify the limit value for gene.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data." />
                            </when>
                            <when value="cpd">
                                <param name="cpd_limit" type="float" value="1" label="Specify the limit value for cpd.data when converting them to pseudo colors" help="Specify length 1 or 2. Length 1 suggests discrete data or 1 directional (positive-valued) data, or the absolute limit for 2 directional data. Length 2 suggests 2 directional data."/>
                            </when>
                        </conditional>
                        <expand macro="node_param" />
                        <conditional name="col_key_select">
                            <param name="col_key_selector" type="select" label="Draw color key(s) for mapped molecular data on the pathway graph?">
                                <option value="yes">Yes</option>
                                <option value="no" selected="true">No</option>
                            </param>
                            <when value="yes">
                                <conditional name="cols_select">
                                    <param name="cols_selector" type="select" label="Specify a discrete spectrum of colors to be plotted as color key?" help="If an arguemeant is provided, the number of discrete colors has to match bins." >
                                        <option value="yes">Yes</option>
                                        <option value="no" selected="true">No</option>
                                    </param>
                                    <when value="yes">
                                        <param name="cols" type="data" format="tabular" label="Specify a discrete spectrum of colors to be plotted as color key" help="Dataframe with a column of colors" />
                                    </when>
                                    <when value="no"> </when>
                                </conditional>
                                <param name="size_by_graph" type="boolean" truevalue="true" falsevalue="" checked="true" label="Determine the sizes and exact location of the color key with respect to the size of the whole graph panel or that of a single node?" />
                                <param name="graph_width" type="float" label="Width of the pathway graph panel" help="This is needed to determine the sizes and exact location of the color key"/>
                                <param name="graph_height" type="float" label="Height of the pathway graph panel" help="This is needed to determine the sizes and exact location of the color key"/>
                                <param name="node_width" type="float" label="Width of the the standard gene nodes (rectangles)" help="This is needed to determine the sizes and exact location of the color key" />
                                <param name="node_height" type="float" label="Width of the the standard gene nodes (rectangles)" help="This is needed to determine the sizes and exact location of the color key" />
                                <param name="key_pos" type="select" label="How to control the position of color key(s)?>">
                                    <option value="bottomleft">bottomleft</option>
                                    <option value="bottomright">bottomright</option>
                                    <option value="topleft">topleft</option>
                                    <option value="topright" selected="true">topright</option>
                                </param>    
                                <param name="off_set_x" type="float" value="0" label="Specify the offset values in the x axes when plotting a new color key, as to avoid overlap with existing color keys or boundaries" help="Note that the off.sets value is reset and returned each time col.key function is called, as for the reference of plotting the next color key." />
                                <param name="off_set_y" type="float" value="0" label="Specify the offset values in the y axes when plotting a new color key, as to avoid overlap with existing color keys or boundaries" help="Note that the off.sets value is reset and returned each time col.key function is called, as for the reference of plotting the next color key." />
                                <param name="key_align" type="select" label="Value to control how the color keys are aligned when both gene.data and cpd.data are not NULL" >
                                    <option value="x">x</option>
                                    <option value="y">y</option>
                                </param>
                                <param name="cex" type="float" value="0.25" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                                <param name="lwd" type="float" value="1" label="Line width" help="A positive number" /> 
                            </when>
                            <when value="no"> </when>
                        </conditional>
                    </when>
                    <when value="no"> </when>
                </conditional>
            </when>
            <when value="no"> </when>
        </conditional>

        <conditional name="pathview_select">
            <param name="pathview_selector" type="select" label="Visualizes pathway based data integration?">
                <option value="yes">Yes</option>
                <option value="no" selected="true">No</option>
            </param>
            <when value="yes">
                <conditional name="data_select">
                    <param name="data_selector" type="select" label="Specify gene or cpd data?" >
                        <option value="gene">gene</option>
                        <option value="cpd" selected="true">cpd</option>
                    </param>
                    <when value="gene">
                        <param name="gene_data" type="data" format="tabular" label="Gene data" help="Dataframe with either one numeric/character column (single sample) or a matrix-like data (multiple sample). Matrix-like data structure has genes as rows and samples as columns. Row names should be gene IDs. Here gene ID is a generic concepts, including multiple types of gene, transcript and protein uniquely mappable to KEGG gene IDs. KEGG ortholog IDs are also treated as gene IDs as to handle metagenomic data. Check details for mappable ID types." />
                        <param name="data_type" type="select" label="Data type" >
                            <option value="numeric">Numeric (single sample)</option>
                            <option value="character">Character (single sample)</option>
                            <option value="matrix">Matrix-like structure (multiple sample) </option>
                        </param>
                    </when>
                    <when value="cpd"> 
                        <param name="cpd_data" type="data" format="tabular" label="cpd data" help="Dataframe with either one numeric/character column (single sample) or a matrix-like data (multiple sample). cpd data is named with IDs mappable to KEGG compound IDs. Over 20 types of IDs included in CHEMBL database can be used here. Check details for mappable ID types." />
                        <param name="data_type" type="select" label="Data type" >
                            <option value="numeric">Numeric (single sample)</option>
                            <option value="character">Character (single sample)</option>
                            <option value="matrix">Matrix-like structure (multiple sample) </option>
                        </param>
                    </when>
                </conditional>
                <conditional name="pathway_id_select">
                    <param name="pathway_id_selector" type="select" label="Specify a single or multiple KEGG pathway ID(s)?">
                        <option value="single">Single</option>
                        <option value="multiple">Multiple</option>
                    </param>
                    <when value="single">
                        <param name="pathway_id" type="text" label="KEGG pathway ID" help="usually 5 digit, may also include the 3 letter KEGG species code." />
                    </when>
                    <when value="multiple">
                        <param name="pathway_id" type="data" format="tabular" label="KEGG pathway ID" help="Dataframe with one column of IDs. Usually 5 digit, may also include the 3 letter KEGG species code." />
                    </when>
                </conditional>
                <param name="species" type="text" value="hsa" label="KEGG code, the scientific name, or the common name of the target species" help="When KEGG ortholog pathway is considered, use ko. The default species is Homo sapiens (scientific name) or human (common name)." />
                <!--Not sure about this-->
                <param name="kegg_file" type="data" format="xml" label="KEGG pathway data file" help="xml file" />
                <param name="cpd_idtype" type="text" value="kegg" label="ID type used for cpd.data" />
                <param name="gene_idtype" type="text" value="entrez" label="ID type used for gene.data" help="For species other than Entrez Gene, gene.idtype should be set to KEGG as KEGG use other types of gene IDs." />
                <param name="gene_annotpkg" type="text" optional="true" label="Name of the annotation package to use for mapping between other gene ID types including symbols and Entrez gene ID" />
                <param name="min_nnodes" type="integer" value="3" label="Minimal number of nodes of type gene, enzyme, compound or ortholog for a pathway to be considered" /> 
                <conditional name="kegg_native_select">
                    <param name="kegg_native_selector" type="select" label="Render pathway graph as native KEGG graph (.png) or using graphviz layout engine (.pdf)?">
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </param>
                    <when value="yes">
                        <conditional name="same_layer_select">
                            <param name="same_layer_selector" type="select" label="Control plotting layers?" help="1) if node colors be plotted in the same layer as the pathway graph when kegg.native=TRUE">
                                <option value="yes">Yes</option>
                                <option value="no">No</option>
                            </param>
                            <when value="yes">
                                <param name="map_symbol" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map gene IDs to symbols for gene node labels?" help="If no selected, the graphic name from the KGML file will be used." />
                            </when>
                            <when value="no"> </when>
                        </conditional>
                        <param name="res" type="integer" value="300" label="The nominal resolution" help="In ppi which will be recorded in the bitmap file, if a positive integer. Also used for ’units’ other than the default, and to convert points to pixels" />
                        <param name="cex" type="float" value="0.25" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                    </when>
                    <when value="no">
                         <param name="expand_node" type="boolean" truevalue="true" falsevalue="" checked="false" label="Expand multiple-gene nodes into single-gene nodes?" help="Each expanded single-gene nodes inherits all edges from the original multiplegene node. This option only affects graphviz graph view, i.e. when kegg.native=FALSE. This option is not effective for most metabolic pathways where it conflits with converting reactions to edges." />
                         <param name="split_group" type="boolean" truevalue="true" falsevalue="" checked="false" label="Split node groups to individual nodes?" help="Each split member nodes inherits all edges from the node group. This option only affects graphviz graph view, i.e. when kegg.native=FALSE. This option also effects most metabolic pathways even without group nodes defined orginally. For these pathways, genes involved in the same reaction are grouped automatically when converting reactions to edges unless split.group=TRUE" />
                        <param name="map_cpdname" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map compound IDs to formal names for compound node labels?" help="If no selected the graphic name from the KGML file (KEGG compound accessions) will be used. This option is only effective for kegg.native=FALSE. When kegg.native=TRUE, the native KEGG labels will be kept." />
                        <param name="same_layer" type="boolean" truevalue="true" falsevalue="" checked="true" label="Control plotting layers?" help="1) if node colors be plotted in the same layer as the pathway graph when kegg.native=TRUE, 2) if edge/node type legend be plotted in the same page when kegg.native=FALSE" />
                        <param name="cex" type="float" value="0.5" label="The amount by which plotting text and symbols should be scaled relative to the default 1" />
                        <param name="sign_pos" type="select" label="How to control the position of pathview signature?">
                            <option value="bottomleft">bottomleft</option>
                            <option value="bottomright" selected="true">bottomright</option>
                            <option value="topleft">topleft</option>
                            <option value="topright">topright</option>
                        </param>
                        <param name="path_graph" type="data" format="png" label="Graph object parsed from KGML file" />
                        <param name="pdf_width" type="float" value="7" label="Width of the pathway graph pdf file" help="Note that pdf width increase by half when same.layer=TRUE to accommodate legends." />
                        <param name="pdf_height" type="float" value="7" label="Height of the pathway graph pdf file" help="Note that pdf width increase by half when same.layer=TRUE to accommodate legends." />
                        <param name="rankdir" type="select" label="Specify the pathway graph layout direction">
                            <option value="LR">left to right</option>
                            <option value="TB">top to bottom</option>
                        </param>
                        <param name="is_signal" type="boolean" truevalue="true" falsevalue="" checked="true" label="Drop all the unconnected nodes if the pathway is treated as a signaling pathway?" help="This argument also affect the graph layout type, i.e. dot for signals or neato otherwise."/> 
                        <param name="afactor" type="float" value="1" label="Node amplifying factor" help="This argument is for node size fine-tuning, its effect is subtler than expected."/>
                        <param name="text_width" type="float" value="15" label="Specify the line width for text wrap" />
                        <param name="cpd_lab_offset" type="float" value="1.0" label="Specify how much compound labels should be put above the default position or node center" help="This argument is useful when map.cpdname=TRUE, i.e. compounds are labelled by full name, which affects the look of compound nodes and color."/>
                    </when>
                </conditional>
                <param name="map_null" type="boolean" truevalue="true" falsevalue="" checked="true" label="Map the NULL gene.data or cpd.data to pathway?" help="When NULL data are mapped, the gene or compound nodes in the pathway will be rendered as actually mapped nodes, except with NA-valued color. When NULL data are not mapped, the nodes are rendered as unmapped nodes. This argument mainly affects native KEGG graph view" />
                <param name="node_sum" type="select" label="Specify the method name to calculate node summary given that multiple genes or compounds are mapped to it" >
                  <option value="sum">sum</option>
                  <option value="mean">mean</option>
                  <option value="max">max</option>
                  <option value="max_abs">max.abs</option>
                  <option value="random">random</option>
                </param>
            </when>
            <when value="no"> </when>
        </conditional>      
    </inputs>

    <outputs>
        <data name="kegg_names_output" format="txt" label="node.info on ${on_string}: kegg.names output" >
            <filter>output == "kegg.names"</filter>
        </data>
        <data name="type_output" format="txt" label="node.info on ${on_string}: type output" >
            <filter>output == "type"</filter>
        </data>
        <data name="component_output" format="txt" label="node.info on ${on_string}: component output" >
            <filter>output == "component"</filter>
        </data>
        <data name="size_output" format="txt" label="node.info on ${on_string}: size output" >
            <filter>output == "size"</filter>
        </data>
        <data name="labels_output" format="txt" label="node.info on ${on_string}: labels output" >
            <filter>output == "labels"</filter>
        </data>
        <data name="shape_output" format="txt" label="node.info on ${on_string}: shape output" >
            <filter>output == "shape"</filter>
        </data>
        <data name="x_output" format="txt" label="node.info on ${on_string}: x output" >
            <filter>output == "x"</filter>
        </data>
        <data name="y_output" format="txt" label="node.info on ${on_string}: y output" >
            <filter>output == "y"</filter>
        </data>
        <data name="width_output" format="txt" label="node.info on ${on_string}: width output" >
            <filter>output == "width"</filter>
        </data>
        <data name="height_output" format="txt" label="node.info on ${on_string}: height output" >
            <filter>output == "height"</filter>
        </data>
        <data name="node_map_output" format="txt" label="node.map on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes"</filter>
        </data>
        <data name="node_color_output" format="txt" label="node.color on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes" and node_map_select['node_color_select']['node_color_selector'] == "yes"</filter>
        </data>
        <data name="col_key_output" format="png" label="col.key on ${on_string}: output" >
            <filter>node_map_select['node_map_selector']=="yes" and node_map_select['node_color_select']['node_color_selector'] == "yes" and node_map_select['node_color_select']['col_key_select']['col_key_selector'] == "yes"</filter>
        </data>
    </outputs>

    <tests>
        <test expect_num_outputs="1">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="no" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
        </test>
        <test expect_num_outputs="2">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="no" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output1.txt" />
        </test>
        <test expect_num_outputs="2">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="yes" />
                    <param name="mol_data" value="mol_data.tabular" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
             <conditional name="node_color_select">
                <param name="node_color_selector" value="no" />
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output2.txt" />
        </test>
        <test expect_num_outputs="3">
            <param name="object" value="hsa04110.xml" />
            <param name="short_name" value="true" />
            <param name="output" value="kegg.names" />
             <conditional name="node_map_select">
                <param name="node_map_selector" value="yes" />
                <conditional name="mol_data_select">
                    <param name="mol_data_selector" value="yes" />
                    <param name="mol_data" value="mol_data.tabular" />
                </conditional>
                <param name="node_types" value="gene" />
                <param name="node_sum" value="sum" />
                <param name="entrez_gnodes" value="true" />
            </conditional>
             <conditional name="node_color_select">
                <param name="node_color_selector" value="yes" />
                <param name="discrete" value="false" />
                <conditional name="data_select">
                    <param name="data_selector" value="cpd" />
                    <param name="cpd_limit" value="1" />
                </conditional>
                <param name="bin" value="10" />
                <param name="both_dirs" value="true" />
                <param name="low" value="green" />
                <param name="mid" value="gray" />
                <param name="high" value="red" />
                <param name="na_col" value="transparent" />
                <param name="trans_fun" value="none"/>
            </conditional>
            <output name="kegg_names_output" value="kegg.names_output.txt" />
            <output name="node_map_output" value="node_map_output2.txt" />
            <output name="node_color_output" value="node_color_output.txt" />
        </test>
    </tests>

    <help><![CDATA[
Extract node information from KEGG pathway. The parser function, parser KGML file and/or extract node information from KEGG pathway.

Parser function node.info extract node data from parsed KEGG pathways. KGML files are parsed using parseKGML2 and KEGGpathway2Graph2. These functions from KEGGgraph package have been heavily modified for reaction parsing and conversion to edges.

It returns:

- a named list of 10 elements: "kegg.names", "type", "component", "size", "labels", "shape", "x", "y", "width" and "height". Each elements record the corresponding attribute for all nodes in the parsed KEGG pathway.

===========================================================================================================================================

If map molecular data onto KEGG pathway nodes is selected. The mapper function, mapping molecular data(gene expression, metabolite abundance etc)to nodes in KEGG pathway.

Mapper function node.map maps user supplied molecular data to KEGG pathways. This function takes standard KEGG molecular IDs (Entrez Gene ID or KEGG Compound Accession) and map them to pathway nodes. None KEGG molecular gene IDs or Compound IDs are pre-mapped to standard KEGG IDs by calling another function mol.sum. When multiple molecules map to one node, the corresponding molecular data are summarized into a single node summary by calling function specified by node.sum. This mapped node summary data together with the parsed KGML data are then returned for further processing. Proper input data include: gene expression, protein expression, genetic association, metabolite abundance, genomic data, literature, and other data types mappable to pathways. The input mol.data may be NULL, then no molecular data are actually mapped, but all nodes of the specified node.type are considered "mappable" and their parsed KGML data returned.

It returns:

A dataframe of parsed KGML data and summary molecular data for each mapped node with the columns:

- `kegg.names:` standard KEGG IDs/Names for mapped nodes. It’s Entrez Gene ID or KEGG Compound Accessions.
- `labels:` Node labels to be used when needed
- `type:` node type, currently 4 types are supported: "gene","enzyme", "compound" and "ortholog".
- `x:` x coordinate in the original KEGG pathway graph.
- `y:` y coordinate in the original KEGG pathway graph.
- `width:` node width in the original KEGG pathway graph.
- `height:` node height in the original KEGG pathway graph.
- `other:` columns columns of the mapped gene/compound data

===========================================================================================================================================

If code molecular data as pseudo colors on the pathway graph is selected, the function node.color converts the mapped molecular data (gene.data or cpd.data) by node.map function into pseudo colors, which then can be plotted on the pathway graph. col.key is used in combination with node.color in pathview, although this function can be used independently for similar tasks.

It returns:

- dataframe with one column or a matrix of colors. Its dimensionality is the same as the corresponding gene.data or cpd.data. col.key plots a color key on existing pathway graph, then returns a updated version of off.sets for the reference of next color key.

    ]]></help>
    <expand macro="citations" />
</tool>